common.jdbc.clear=truncate table sbtest3
common.jdbc.insert.sql=insert into sbtest3 (k,c,pad) values (?,?,?)
common.jdbc.insert.values=Int:1,String:c,String:pad
common.ss.insert.sql=insert into sbtest (k,c,pad) values (?,?,?)
common.ss.insert.values=Int:1,String:c,String:pad
common.ss.clear=truncate table sbtest
jdbc.benchmark.fullrouting.encrypt.delete.sql=delete from sbtest3 where pad=?
jdbc.benchmark.fullrouting.encrypt.delete.values=String:abc
jdbc.benchmark.fullrouting.encrypt.update.sql=update sbtest3 set c=? where pad like ?
jdbc.benchmark.fullrouting.encrypt.update.values=String:c-update,String:pad%
jdbc.benchmark.fullrouting.encrypt.insert.sql=update sbtest3 set c=? where pad=?
jdbc.benchmark.fullrouting.encrypt.insert.values=String:update,String:abc
jdbc.benchmark.fullrouting.encrypt.select.sql=select count(*) from sbtest3
jdbc.benchmark.fullrouting.encrypt.select.values=String:c%
ss.benchmark.fullrouting.encrypt.delete.sql=delete from sbtest where pad=?
ss.benchmark.fullrouting.encrypt.delete.values=String:pad
ss.benchmark.fullrouting.encrypt.update.sql=update sbtest set c=? where pad like ?
ss.benchmark.fullrouting.encrypt.update.values=String:c-update,String:pad%
ss.benchmark.fullrouting.encrypt.select.sql=select count(*) from sbtest
ss.benchmark.fullrouting.encrypt.select.values=String:c%
ss.benchmark.fullrouting.encrypt.insert.sql=insert into sbtest (k,c,pad) VALUES (?,?,?)
ss.benchmark.fullrouting.encrypt.insert.values=Int:1,String:c,String:pad
jdbc.benchmark.fullrouting.masterslave.delete.sql=delete from sbtest3 where c=?
jdbc.benchmark.fullrouting.masterslave.delete.values=String:abc
jdbc.benchmark.fullrouting.masterslave.update.sql=update sbtest3 set pad=? where c like ?
jdbc.benchmark.fullrouting.masterslave.update.values=String:pad-update,String:c%
jdbc.benchmark.fullrouting.masterslave.select.sql=select count(*) from sbtest3
jdbc.benchmark.fullrouting.masterslave.select.values=String:c%
ss.benchmark.fullrouting.masterslave.delete.sql=delete from sbtest where c=?
ss.benchmark.fullrouting.masterslave.delete.values=String:c2
ss.benchmark.fullrouting.masterslave.update.sql=update sbtest set pad=? where c like ?
ss.benchmark.fullrouting.masterslave.update.values=String:pad-update,String:c%
ss.benchmark.fullrouting.masterslave.select.sql=select count(*) from sbtest
ss.benchmark.fullrouting.masterslave.select.values=String:c%
jdbc.benchmark.fullrouting.sharding.delete.sql=delete from sbtest3 where c=?
jdbc.benchmark.fullrouting.sharding.delete.values=String:abc
jdbc.benchmark.fullrouting.sharding.update.sql=update sbtest3 set pad=? where c like ?
jdbc.benchmark.fullrouting.sharding.update.values=String:pad-update,String:c%
jdbc.benchmark.fullrouting.sharding.select.sql=select count(*) from sbtest3
jdbc.benchmark.fullrouting.sharding.select.values=String:c%
ss.benchmark.fullrouting.sharding.delete.sql=delete from sbtest where c=?
ss.benchmark.fullrouting.sharding.delete.values=String:c2
ss.benchmark.fullrouting.sharding.update.sql=update sbtest set pad=? where c like ?
ss.benchmark.fullrouting.sharding.update.values=String:pad-update,String:c%
ss.benchmark.fullrouting.sharding.select.sql=select count(*) from sbtest
ss.benchmark.fullrouting.sharding.select.values=String:c%
jdbc.benchmark.fullrouting.shardingmasterslaveencrypt.delete.sql=delete from sbtest3 where c=?
jdbc.benchmark.fullrouting.shardingmasterslaveencrypt.delete.values=String:abc
jdbc.benchmark.fullrouting.shardingmasterslaveencrypt.update.sql=update sbtest3 set pad=? where c like ?
jdbc.benchmark.fullrouting.shardingmasterslaveencrypt.update.values=String:pad-update,String:c%
jdbc.benchmark.fullrouting.shardingmasterslaveencrypt.select.sql=select count(*) from sbtest3
jdbc.benchmark.fullrouting.shardingmasterslaveencrypt.select.values=String:c%
ss.benchmark.fullrouting.shardingmasterslaveencrypt.delete.sql=delete from sbtest3 where c=?
ss.benchmark.fullrouting.shardingmasterslaveencrypt.delete.values=String:c2
ss.benchmark.fullrouting.shardingmasterslaveencrypt.update.sql=update sbtest set pad=? where c like ?
ss.benchmark.fullrouting.shardingmasterslaveencrypt.update.values=String:pad-update,String:c%
ss.benchmark.fullrouting.shardingmasterslaveencrypt.select.sql=select count(*) from sbtest
ss.benchmark.fullrouting.shardingmasterslaveencrypt.select.values=String:c%
jdbc.benchmark.rangerouting.encrypt.delete.sql=delete from sbtest3 where c in(?,?) and id in(?,?)
jdbc.benchmark.rangerouting.encrypt.delete.values=String:c1,String:c2
jdbc.benchmark.rangerouting.encrypt.update.sql=update sbtest3 set pad=? where c in(?,?) and id in(?,?)
jdbc.benchmark.rangerouting.encrypt.update.values=String:pad-update,String:c1,String:c2
jdbc.benchmark.rangerouting.encrypt.select.sql=select count(*) from sbtest3 where c in(?,?,?) and id in (?,?,?)
jdbc.benchmark.rangerouting.encrypt.select.values=String:c1,String:c2,String:c3,Int:1,Int:2,Int:3
jdbc.benchmark.rangerouting.encrypt.insert.sql=insert into sbtest3 (k,c,pad) values(?,?,?),(?,?,?)
jdbc.benchmark.rangerouting.encrypt.insert.values=Int:1,String:c,String:pad,Int:2,String:c,String:pad
ss.benchmark.rangerouting.encrypt.delete.sql=delete from sbtest where c in(?,?) and id in(?,?)
ss.benchmark.rangerouting.encrypt.delete.values=String:c1,String:c2
ss.benchmark.rangerouting.encrypt.update.sql=update sbtest set pad=? where c in(?,?) and id in(?,?)
ss.benchmark.rangerouting.encrypt.update.values=String:pad-update,String:c1,String:c2
ss.benchmark.rangerouting.encrypt.insert.sql=insert into sbtest (k,c,pad) values(?,?,?),(?,?,?)
ss.benchmark.rangerouting.encrypt.insert.values=Int:1,String:c,String:pad,Int:2,String:c,String:pad
ss.benchmark.rangerouting.encrypt.select.sql=select count(*) from sbtest where c in(?,?,?) and id in (?,?,?)
ss.benchmark.rangerouting.encrypt.select.values=String:c1,String:c2,String:c3,Int:1,Int:2,Int:3
jdbc.benchmark.rangerouting.masterslave.delete.sql=delete from sbtest3 where k in(?,?) and id in(?,?)
jdbc.benchmark.rangerouting.masterslave.delete.values=Int:1,Int:2
jdbc.benchmark.rangerouting.masterslave.update.sql=update sbtest3 set c=?, pad=? where k in(?,?) and id in(?,?)
jdbc.benchmark.rangerouting.masterslave.update.values=String:c-update,String:pad-update,Int:1,Int:2
jdbc.benchmark.rangerouting.masterslave.select.sql=select count(*) from sbtest3 where k in (?,?) and id in (?,?)
jdbc.benchmark.rangerouting.masterslave.select.values=Int:1,Int:2,Int:1,Int:2
jdbc.benchmark.rangerouting.masterslave.insert.sql=insert into sbtest3 (k,c,pad) values(?,?,?),(?,?,?)
jdbc.benchmark.rangerouting.masterslave.insert.values=Int:1,String:c,String:pad,Int:2,String:c,String:pad
ss.benchmark.rangerouting.masterslave.delete.sql=delete from sbtest where k in(?,?) and id in(?,?)
ss.benchmark.rangerouting.masterslave.delete.values=Int:1,Int:2
ss.benchmark.rangerouting.masterslave.update.sql=update sbtest set c=?, pad=? where k in(?,?) and id in(?,?)
ss.benchmark.rangerouting.masterslave.update.values=String:c-update,String:pad-update,Int:1,Int:2
ss.benchmark.rangerouting.masterslave.select.sql=select count(*) from sbtest where k in (?,?) and id in (?,?)
ss.benchmark.rangerouting.masterslave.select.values=Int:1,Int:2,Int:1,Int:2
ss.benchmark.rangerouting.masterslave.insert.sql=insert into sbtest (k,c,pad) values(?,?,?),(?,?,?)
ss.benchmark.rangerouting.masterslave.insert.values=Int:1,String:c,String:pad,Int:2,String:c,String:pad
jdbc.benchmark.rangerouting.sharding.delete.sql=delete from sbtest3 where k in(?,?) and id in(?,?)
jdbc.benchmark.rangerouting.sharding.delete.values=Int:1,Int:2
jdbc.benchmark.rangerouting.sharding.update.sql=update sbtest3 set c=?, pad=? where k in(?,?) and id in(?,?)
jdbc.benchmark.rangerouting.sharding.update.values=String:c-update,String:pad-update,Int:1,Int:2
jdbc.benchmark.rangerouting.sharding.select.sql=select count(*) from sbtest3 where k in (?,?) and id in (?,?)
jdbc.benchmark.rangerouting.sharding.select.values=Int:1,Int:2,Int:1,Int:2
jdbc.benchmark.rangerouting.sharding.insert.sql=insert into sbtest3 (k,c,pad) values(?,?,?),(?,?,?)
jdbc.benchmark.rangerouting.sharding.insert.values=Int:1,String:c,String:pad,Int:2,String:c,String:pad
ss.benchmark.rangerouting.sharding.delete.sql=delete from sbtest where k in(?,?) and id in(?,?)
ss.benchmark.rangerouting.sharding.delete.values=Int:1,Int:2
ss.benchmark.rangerouting.sharding.update.sql=update sbtest set c=?, pad=? where k in(?,?) and id in(?,?)
ss.benchmark.rangerouting.sharding.update.values=String:c-update,String:pad-update,Int:1,Int:2
ss.benchmark.rangerouting.sharding.select.sql=select count(*) from sbtest where k in (?,?) and id in (?,?)
ss.benchmark.rangerouting.sharding.select.values=Int:1,Int:2,Int:1,Int:2
ss.benchmark.rangerouting.sharding.insert.sql=insert into sbtest (k,c,pad) values(?,?,?),(?,?,?)
ss.benchmark.rangerouting.sharding.insert.values=Int:1,String:c,String:pad,Int:2,String:c,String:pad
ss.benchmark.rangerouting.sharding.insert.single.sql=insert into sbtest (k,c,pad) values(?,?,?)
ss.benchmark.rangerouting.sharding.insert.single.values=Int:1,String:c,String:pad
jdbc.benchmark.rangerouting.shardingmasterslaveencrypt.delete.sql=delete from sbtest3 where k in(?,?) and id in(?,?)
jdbc.benchmark.rangerouting.shardingmasterslaveencrypt.delete.values=Int:1,Int:2
jdbc.benchmark.rangerouting.shardingmasterslaveencrypt.update.sql=update sbtest3 set c=?, pad=? where k in(?,?) and id in(?,?)
jdbc.benchmark.rangerouting.shardingmasterslaveencrypt.update.values=String:c-update,String:pad-update,Int:1,Int:2
jdbc.benchmark.rangerouting.shardingmasterslaveencrypt.select.sql=select count(*) from sbtest3 where k in (?,?) and id in (?,?)
jdbc.benchmark.rangerouting.shardingmasterslaveencrypt.select.values=Int:1,Int:2,Int:1,Int:2
jdbc.benchmark.rangerouting.shardingmasterslaveencrypt.insert.sql=insert into sbtest3 (k,c,pad) values(?,?,?),(?,?,?)
jdbc.benchmark.rangerouting.shardingmasterslaveencrypt.insert.values=Int:1,String:c,String:pad,Int:2,String:c,String:pad
ss.benchmark.rangerouting.shardingmasterslaveencrypt.delete.sql=delete from sbtest where k in(?,?) and id in(?,?)
ss.benchmark.rangerouting.shardingmasterslaveencrypt.delete.values=Int:1,Int:2
ss.benchmark.rangerouting.shardingmasterslaveencrypt.update.sql=update sbtest set c=?, pad=? where k in(?,?) and id in(?,?)
ss.benchmark.rangerouting.shardingmasterslaveencrypt.update.values=String:c-update,String:pad-update,Int:1,Int:2
ss.benchmark.rangerouting.shardingmasterslaveencrypt.select.sql=select count(*) from sbtest where k in (?,?) and id in (?,?)
ss.benchmark.rangerouting.shardingmasterslaveencrypt.select.values=Int:1,Int:2,Int:1,Int:2
ss.benchmark.rangerouting.shardingmasterslaveencrypt.insert.sql=insert into sbtest (k,c,pad) values(?,?,?),(?,?,?)
ss.benchmark.rangerouting.shardingmasterslaveencrypt.insert.values=Int:1,String:c,String:pad,Int:2,String:c,String:pad
ss.benchmark.rangerouting.shardingmasterslaveencrypt.insert.sql.single=insert into sbtest (k,c,pad) values(?,?,?)
ss.benchmark.rangerouting.shardingmasterslaveencrypt.insert.values.single=Int:1,String:c,String:pad
jdbc.benchmark.singlerouting.encrypt.delete.sql=delete from sbtest3 where k=? and c=? and id=?
jdbc.benchmark.singlerouting.encrypt.delete.values=Int:1,String:c1
jdbc.benchmark.singlerouting.encrypt.update.sql=update sbtest3 set pad=? where k=? and c=? and id=?
jdbc.benchmark.singlerouting.encrypt.update.values=String:pad-update,Int:1,String:c1
jdbc.benchmark.singlerouting.encrypt.select.sql=select count(*) from sbtest3 where k=? and c=? and id=?
jdbc.benchmark.singlerouting.encrypt.select.values=Int:1,String:c101,Int:1
jdbc.benchmark.singlerouting.encrypt.insert.sql=insert into sbtest3 (k,c,pad) VALUES (?,?,?)
jdbc.benchmark.singlerouting.encrypt.insert.values=Int:1,String:c1,String:pad1
ss.benchmark.singlerouting.encrypt.delete.sql=delete from sbtest where k=? and c=? and id=?
ss.benchmark.singlerouting.encrypt.delete.values=Int:1,String:c1
ss.benchmark.singlerouting.encrypt.update.sql=update sbtest set pad=? where k=? and c=? and id=?
ss.benchmark.singlerouting.encrypt.update.values=String:pad-update,Int:1,String:c1
ss.benchmark.singlerouting.encrypt.insert.sql=insert into sbtest (k,c,pad) VALUES (?,?,?)
ss.benchmark.singlerouting.encrypt.insert.values=Int:1,String:c1,String:pad1
ss.benchmark.singlerouting.encrypt.select.sql=select count(*) from sbtest where k=? and c=? and id=?
ss.benchmark.singlerouting.encrypt.select.values=Int:1,String:c101,Int:1
jdbc.benchmark.singlerouting.masterslave.delete.sql=delete from sbtest3 where k=? and id=?
jdbc.benchmark.singlerouting.masterslave.delete.values=Int:1
jdbc.benchmark.singlerouting.masterslave.update.sql=update sbtest3 set c=?, pad=? where k=? and id=?
jdbc.benchmark.singlerouting.masterslave.update.values=String:c-update,String:pad-update,Int:1
jdbc.benchmark.singlerouting.masterslave.select.sql=select count(*) from sbtest3 where k=? and id=?
jdbc.benchmark.singlerouting.masterslave.select.values=Int:1,Int:1
jdbc.benchmark.singlerouting.masterslave.insert.sql=insert into sbtest3 (k,c,pad) values (?,?,?)
jdbc.benchmark.singlerouting.masterslave.insert.values=Int:1,String:c,String:pad
ss.benchmark.singlerouting.masterslave.delete.sql=delete from sbtest where k=? and id=?
ss.benchmark.singlerouting.masterslave.delete.values=Int:1
ss.benchmark.singlerouting.masterslave.update.sql=update sbtest set c=?, pad=? where k=? and id=?
ss.benchmark.singlerouting.masterslave.update.values=String:c-update,String:pad-update,Int:1
ss.benchmark.singlerouting.masterslave.select.sql=select count(*) from sbtest where k=? and id=?
ss.benchmark.singlerouting.masterslave.select.values=Int:1,Int:1
ss.benchmark.singlerouting.masterslave.insert.sql=insert into sbtest (k,c,pad) values (?,?,?)
ss.benchmark.singlerouting.masterslave.insert.values=Int:1,String:c,String:pad
jdbc.benchmark.singlerouting.sharding.delete.sql=delete from sbtest3 where k=? and id=?
jdbc.benchmark.singlerouting.sharding.delete.values=Int:3
jdbc.benchmark.singlerouting.sharding.update.sql=update sbtest3 set c=?, pad=? where k=? and id=?
jdbc.benchmark.singlerouting.sharding.update.values=String:c-update,String:pad-update,Int:1
jdbc.benchmark.singlerouting.sharding.select.sql=select count(*) from sbtest3 where k=? and id=?
jdbc.benchmark.singlerouting.sharding.select.values=Int:1,Int:1
jdbc.benchmark.singlerouting.sharding.insert.sql=insert into sbtest3 (k,c,pad) VALUES (?,?,?)
jdbc.benchmark.singlerouting.sharding.insert.values=Int:1,String:c,String:pad
ss.benchmark.singlerouting.sharding.delete.sql=delete from sbtest where k=? and id=?
ss.benchmark.singlerouting.sharding.delete.values=Int:1
ss.benchmark.singlerouting.sharding.update.sql=update sbtest set c=?, pad=? where k=? and id=?
ss.benchmark.singlerouting.sharding.update.values=String:c-update,String:pad-update,Int:1
ss.benchmark.singlerouting.sharding.select.sql=select count(*) from sbtest where k=? and id=?
ss.benchmark.singlerouting.sharding.select.values=Int:1,Int:1
ss.benchmark.singlerouting.sharding.insert.sql=insert into sbtest (k,c,pad) VALUES (?,?,?)
ss.benchmark.singlerouting.sharding.insert.values=Int:1,String:c,String:pad
jdbc.benchmark.singlerouting.shardingmasterslaveencrypt.delete.sql=delete from sbtest3 where k=? and id=?
jdbc.benchmark.singlerouting.shardingmasterslaveencrypt.delete.values=Int:1
jdbc.benchmark.singlerouting.shardingmasterslaveencrypt.update.sql=update sbtest3 set c=?, pad=? where k=? and id=?
jdbc.benchmark.singlerouting.shardingmasterslaveencrypt.update.values=String:c-update,String:pad-update,Int:1
jdbc.benchmark.singlerouting.shardingmasterslaveencrypt.select.sql=select count(*) from sbtest3 where k=? and id=?
jdbc.benchmark.singlerouting.shardingmasterslaveencrypt.select.values=Int:1,Int:1
jdbc.benchmark.singlerouting.shardingmasterslaveencrypt.insert.sql=insert into sbtest3 (k,c,pad) VALUES (?,?,?)
jdbc.benchmark.singlerouting.shardingmasterslaveencrypt.insert.values=Int:1,String:c,String:pad
ss.benchmark.singlerouting.shardingmasterslaveencrypt.delete.sql=delete from sbtest where k=? and id=?
ss.benchmark.singlerouting.shardingmasterslaveencrypt.delete.values=Int:1
ss.benchmark.singlerouting.shardingmasterslaveencrypt.update.sql=update sbtest set c=?, pad=? where k=? and id=?
ss.benchmark.singlerouting.shardingmasterslaveencrypt.update.values=String:c-update,String:pad-update,Int:1
ss.benchmark.singlerouting.shardingmasterslaveencrypt.select.sql=select count(*) from sbtest where k=? and id=?
ss.benchmark.singlerouting.shardingmasterslaveencrypt.select.values=Int:1,Int:1
ss.benchmark.singlerouting.shardingmasterslaveencrypt.insert.sql=insert into sbtest (k,c,pad) VALUES (?,?,?)
ss.benchmark.singlerouting.shardingmasterslaveencrypt.insert.values=Int:1,String:c,String:pad
ss.benchmark.result.insert.sql=insert into benchmark_result (product,version,scenario,rules,tps,total,TP50th,TP90th,TP95th,maxCost,minCost,dbsql,dboperation,concurrency,updatetime,tableshardingcount,dbshardingcount) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
ss.benchmark.avg.result.insert.sql=insert into benchmark_avg_result (product,version,scenario,rules,avg_tps,total,TP50th,TP90th,TP95th,maxCost,minCost,dbsql,dboperation,concurrency,updatetime,tableshardingcount,dbshardingcount) values (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
ss.benchmark.result.fullrouting.encrypt.mysql.select.sql=select * from benchmark_result where scenario='FullRouting' and rules='Encrypt' and product='MYSQL' and dboperation='Select' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.fullrouting.encrypt.shardingjdbc.select.sql=select * from benchmark_result where scenario='FullRouting' and rules='Encrypt' and product='ShardingJDBC' and dboperation='Select' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.fullrouting.encrypt.proxy.select.sql=select * from benchmark_result where scenario='FullRouting' and rules='Encrypt' and product='ShardingProxy' and dboperation='Select' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.fullrouting.masterslave.mysql.select.sql=select * from benchmark_result where scenario='FullRouting' and rules='MasterSlave' and product='MYSQL' and dboperation='Select' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.fullrouting.masterslave.shardingjdbc.select.sql=select * from benchmark_result where scenario='FullRouting' and rules='MasterSlave' and product='ShardingJDBC' and dboperation='Select' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.fullrouting.masterslave.proxy.select.sql=select * from benchmark_result where scenario='FullRouting' and rules='MasterSlave' and product='ShardingProxy' and dboperation='Select' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.fullrouting.sharding.mysql.select.sql=select * from benchmark_result where scenario='FullRouting' and rules='Sharding' and product='MYSQL' and dboperation='Select' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.fullrouting.sharding.shardingjdbc.select.sql=select * from benchmark_result where scenario='FullRouting' and rules='Sharding' and product='ShardingJDBC' and dboperation='Select' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.fullrouting.sharding.proxy.select.sql=select * from benchmark_result where scenario='FullRouting' and rules='Sharding' and product='ShardingProxy' and dboperation='Select' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.fullrouting.shardingmasterslaveencrypt.mysql.select.sql=select * from benchmark_result where scenario='FullRouting' and rules='Sharding+Master+Slave+Encrypt' and product='MYSQL' and dboperation='Select' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.fullrouting.shardingmasterslaveencrypt.shardingjdbc.select.sql=select * from benchmark_result where scenario='FullRouting' and rules='Sharding+Master+Slave+Encrypt' and product='ShardingJDBC' and dboperation='Select' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.fullrouting.shardingmasterslaveencrypt.proxy.select.sql=select * from benchmark_result where scenario='FullRouting' and rules='Sharding+Master+Slave+Encrypt' and product='ShardingProxy' and dboperation='Select' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.fullrouting.encrypt.mysql.insertupdatedelete.sql=select * from benchmark_result where scenario='FullRouting' and rules='Encrypt' and product='MYSQL' and dboperation='Insert+Update+delete' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.fullrouting.encrypt.shardingjdbc.insertupdatedelete.sql=select * from benchmark_result where scenario='FullRouting' and rules='Encrypt' and product='ShardingJDBC' and dboperation='Insert+Update+delete' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.fullrouting.encrypt.proxy.insertupdatedelete.sql=select * from benchmark_result where scenario='FullRouting' and rules='Encrypt' and product='ShardingProxy' and dboperation='Insert+Update+delete' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.fullrouting.masterslave.mysql.insertupdatedelete.sql=select * from benchmark_result where scenario='FullRouting' and rules='MasterSlave' and product='MYSQL' and dboperation='Insert+Update+delete' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.fullrouting.masterslave.shardingjdbc.insertupdatedelete.sql=select * from benchmark_result where scenario='FullRouting' and rules='MasterSlave' and product='ShardingJDBC' and dboperation='Insert+Update+delete' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.fullrouting.masterslave.proxy.insertupdatedelete.sql=select * from benchmark_result where scenario='FullRouting' and rules='MasterSlave' and product='ShardingProxy' and dboperation='Insert+Update+delete' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.fullrouting.sharding.mysql.insertupdatedelete.sql=select * from benchmark_result where scenario='FullRouting' and rules='Sharding' and product='MYSQL' and dboperation='Insert+Update+delete' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.fullrouting.sharding.shardingjdbc.insertupdatedelete.sql=select * from benchmark_result where scenario='FullRouting' and rules='Sharding' and product='ShardingJDBC' and dboperation='Insert+Update+delete' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.fullrouting.sharding.proxy.insertupdatedelete.sql=select * from benchmark_result where scenario='FullRouting' and rules='Sharding' and product='ShardingProxy' and dboperation='Insert+Update+delete' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.fullrouting.shardingmasterslaveencrypt.mysql.insertupdatedelete.sql=select * from benchmark_result where scenario='FullRouting' and rules='Sharding+Master+Slave+Encrypt' and product='MYSQL' and dboperation='Insert+Update+delete' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.fullrouting.shardingmasterslaveencrypt.shardingjdbc.insertupdatedelete.sql=select* from benchmark_result where scenario='FullRouting' and rules='Sharding+Master+Slave+Encrypt' and product='ShardingJDBC' and dboperation='Insert+Update+delete' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.fullrouting.shardingmasterslaveencrypt.proxy.insertupdatedelete.sql=select * from benchmark_result where scenario='FullRouting' and rules='Sharding+Master+Slave+Encrypt' and product='ShardingProxy' and dboperation='Insert+Update+delete' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.rangerouting.encrypt.mysql.select.sql=select * from benchmark_result where scenario='RangeRouting' and rules='Encrypt' and product='MYSQL' and dboperation='Select' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.rangerouting.encrypt.shardingjdbc.select.sql=select * from benchmark_result where scenario='RangeRouting' and rules='Encrypt' and product='ShardingJDBC' and dboperation='Select' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.rangerouting.encrypt.proxy.select.sql=select * from benchmark_result where scenario='RangeRouting' and rules='Encrypt' and product='ShardingProxy' and dboperation='Select' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.rangerouting.masterslave.mysql.select.sql=select * from benchmark_result where scenario='RangeRouting' and rules='MasterSlave' and product='MYSQL' and dboperation='Select' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.rangerouting.masterslave.shardingjdbc.select.sql=select * from benchmark_result where scenario='RangeRouting' and rules='MasterSlave' and product='ShardingJDBC' and dboperation='Select' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.rangerouting.masterslave.proxy.select.sql=select * from benchmark_result where scenario='RangeRouting' and rules='MasterSlave' and product='ShardingProxy' and dboperation='Select' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.rangerouting.sharding.mysql.select.sql=select * from benchmark_result where scenario='RangeRouting' and rules='Sharding' and product='MYSQL' and dboperation='Select' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.rangerouting.sharding.shardingjdbc.select.sql=select * from benchmark_result where scenario='RangeRouting' and rules='Sharding' and product='ShardingJDBC' and dboperation='Select' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.rangerouting.sharding.proxy.select.sql=select * from benchmark_result where scenario='RangeRouting' and rules='Sharding' and product='ShardingProxy' and dboperation='Select' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.rangerouting.shardingmasterslaveencrypt.mysql.select.sql=select * from benchmark_result where scenario='RangeRouting' and rules='Sharding+Master+Slave+Encrypt' and product='MYSQL' and dboperation='Select' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.rangerouting.shardingmasterslaveencrypt.shardingjdbc.select.sql=select * from benchmark_result where scenario='RangeRouting' and rules='Sharding+Master+Slave+Encrypt' and product='ShardingJDBC' and dboperation='Select' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.rangerouting.shardingmasterslaveencrypt.proxy.select.sql=select * from benchmark_result where scenario='RangeRouting' and rules='Sharding+Master+Slave+Encrypt' and product='ShardingProxy' and dboperation='Select' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.rangerouting.encrypt.mysql.insertupdatedelete.sql=select *  from benchmark_result where scenario='RangeRouting' and rules='Encrypt' and product='MYSQL' and dboperation='Insert+Update+delete' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.rangerouting.encrypt.shardingjdbc.insertupdatedelete.sql=select *  from benchmark_result where scenario='RangeRouting' and rules='Encrypt' and product='ShardingJDBC' and dboperation='Insert+Update+delete' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.rangerouting.encrypt.proxy.insertupdatedelete.sql=select *  from benchmark_result where scenario='RangeRouting' and rules='Encrypt' and product='ShardingProxy' and dboperation='Insert+Update+delete' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.rangerouting.masterslave.mysql.insertupdatedelete.sql=select *  from benchmark_result where scenario='RangeRouting' and rules='MasterSlave' and product='MYSQL' and dboperation='Insert+Update+delete' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.rangerouting.masterslave.shardingjdbc.insertupdatedelete.sql=select *  from benchmark_result where scenario='RangeRouting' and rules='MasterSlave' and product='ShardingJDBC' and dboperation='Insert+Update+delete' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.rangerouting.masterslave.proxy.insertupdatedelete.sql=select *  from benchmark_result where scenario='RangeRouting' and rules='MasterSlave' and product='ShardingProxy' and dboperation='Insert+Update+delete' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.rangerouting.sharding.mysql.insertupdatedelete.sql=select *  from benchmark_result where scenario='RangeRouting' and rules='Sharding' and product='MYSQL' and dboperation='Insert+Update+delete' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.rangerouting.sharding.shardingjdbc.insertupdatedelete.sql=select *  from benchmark_result where scenario='RangeRouting' and rules='Sharding' and product='ShardingJDBC' and dboperation='Insert+Update+delete' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.rangerouting.sharding.proxy.insertupdatedelete.sql=select *  from benchmark_result where scenario='RangeRouting' and rules='Sharding' and product='ShardingProxy' and dboperation='Insert+Update+delete' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.rangerouting.shardingmasterslaveencrypt.mysql.insertupdatedelete.sql=select *  from benchmark_result where scenario='RangeRouting' and rules='Sharding+Master+Slave+Encrypt' and product='MYSQL' and dboperation='Insert+Update+delete' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.rangerouting.shardingmasterslaveencrypt.shardingjdbc.insertupdatedelete.sql=select *  from benchmark_result where scenario='RangeRouting' and rules='Sharding+Master+Slave+Encrypt' and product='ShardingJDBC' and dboperation='Insert+Update+delete' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.rangerouting.shardingmasterslaveencrypt.proxy.insertupdatedelete.sql=select *  from benchmark_result where scenario='RangeRouting' and rules='Sharding+Master+Slave+Encrypt' and product='ShardingProxy' and dboperation='Insert+Update+delete' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.singlerouting.encrypt.mysql.select.sql=select * from benchmark_result where scenario='SingleRouting' and rules='Encrypt' and product='MYSQL' and dboperation='Select' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.singlerouting.encrypt.shardingjdbc.select.sql=select * from benchmark_result where scenario='SingleRouting' and rules='Encrypt' and product='ShardingJDBC' and dboperation='Select' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.singlerouting.encrypt.proxy.select.sql=select * from benchmark_result where scenario='SingleRouting' and rules='Encrypt' and product='ShardingProxy' and dboperation='Select' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.singlerouting.masterslave.mysql.select.sql=select * from benchmark_result where scenario='SingleRouting' and rules='MasterSlave' and product='MYSQL' and dboperation='Select' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.singlerouting.masterslave.shardingjdbc.select.sql=select * from benchmark_result where scenario='SingleRouting' and rules='MasterSlave' and product='ShardingJDBC' and dboperation='Select' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.singlerouting.masterslave.proxy.select.sql=select * from benchmark_result where scenario='SingleRouting' and rules='MasterSlave' and product='ShardingProxy' and dboperation='Select' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.singlerouting.sharding.mysql.select.sql=select * from benchmark_result where scenario='SingleRouting' and rules='Sharding' and product='MYSQL' and dboperation='Select' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.singlerouting.sharding.shardingjdbc.select.sql=select * from benchmark_result where scenario='SingleRouting' and rules='Sharding' and product='ShardingJDBC' and dboperation='Select' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.singlerouting.sharding.proxy.select.sql=select * from benchmark_result where scenario='SingleRouting' and rules='Sharding' and product='ShardingProxy' and dboperation='Select' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.singlerouting.shardingmasterslaveencrypt.mysql.select.sql=select * from benchmark_result where scenario='SingleRouting' and rules='Sharding+Master+Slave+Encrypt' and product='MYSQL' and dboperation='Select' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.singlerouting.shardingmasterslaveencrypt.shardingjdbc.select.sql=select * from benchmark_result where scenario='SingleRouting' and rules='Sharding+Master+Slave+Encrypt' and product='ShardingJDBC' and dboperation='Select' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.singlerouting.shardingmasterslaveencrypt.proxy.select.sql=select * from benchmark_result where scenario='SingleRouting' and rules='Sharding+Master+Slave+Encrypt' and product='ShardingProxy' and dboperation='Select' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.singlerouting.encrypt.mysql.insertupdatedelete.sql=select *  from benchmark_result where scenario='SingleRouting' and rules='Encrypt' and product='MYSQL' and dboperation='Insert+Update+delete' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.singlerouting.encrypt.shardingjdbc.insertupdatedelete.sql=select *  from benchmark_result where scenario='SingleRouting' and rules='Encrypt' and product='ShardingJDBC' and dboperation='Insert+Update+delete' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.singlerouting.encrypt.proxy.insertupdatedelete.sql=select *  from benchmark_result where scenario='SingleRouting' and rules='Encrypt' and product='ShardingProxy' and dboperation='Insert+Update+delete' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.singlerouting.masterslave.mysql.insertupdatedelete.sql=select *  from benchmark_result where scenario='SingleRouting' and rules='MasterSlave' and product='MYSQL' and dboperation='Insert+Update+delete' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.singlerouting.masterslave.shardingjdbc.insertupdatedelete.sql=select *  from benchmark_result where scenario='SingleRouting' and rules='MasterSlave' and product='ShardingJDBC' and dboperation='Insert+Update+delete' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.singlerouting.masterslave.proxy.insertupdatedelete.sql=select *  from benchmark_result where scenario='SingleRouting' and rules='MasterSlave' and product='ShardingProxy' and dboperation='Insert+Update+delete' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.singlerouting.sharding.mysql.insertupdatedelete.sql=select *  from benchmark_result where scenario='SingleRouting' and rules='Sharding' and product='MYSQL' and dboperation='Insert+Update+delete' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.singlerouting.sharding.shardingjdbc.insertupdatedelete.sql=select *  from benchmark_result where scenario='SingleRouting' and rules='Sharding' and product='ShardingJDBC' and dboperation='Insert+Update+delete' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.singlerouting.sharding.proxy.insertupdatedelete.sql=select *  from benchmark_result where scenario='SingleRouting' and rules='Sharding' and product='ShardingProxy' and dboperation='Insert+Update+delete' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.singlerouting.shardingmasterslaveencrypt.mysql.insertupdatedelete.sql=select *  from benchmark_result where scenario='SingleRouting' and rules='Sharding+Master+Slave+Encrypt' and product='MYSQL' and dboperation='Insert+Update+delete' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.singlerouting.shardingmasterslaveencrypt.shardingjdbc.insertupdatedelete.sql=select *  from benchmark_result where scenario='SingleRouting' and rules='Sharding+Master+Slave+Encrypt' and product='ShardingJDBC' and dboperation='Insert+Update+delete' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?
ss.benchmark.result.singlerouting.shardingmasterslaveencrypt.proxy.insertupdatedelete.sql=select *  from benchmark_result where scenario='SingleRouting' and rules='Sharding+Master+Slave+Encrypt' and product='ShardingProxy' and dboperation='Insert+Update+delete' and version=? and tableshardingcount=? and dbshardingcount=? and concurrency=?